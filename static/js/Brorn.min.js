// 
// THIS SCRIPT IS CREATED BY CHRISTIAN BRON
// USE ONLY WITH PYTHON FLASK OR DJANGO
//
var CONNECTION = {}
var REQUESTS = {}
var CONNECTION_COUNTER = 0
var ERR_EXCEPTIONS = false
var ON_GOING_REQUEST = []

const _JS_NAME = 'brorn.JS' 
const _JS_VERSION_ = 'v 1.2 beta.TRC' 
const _VERSION_ = _JS_VERSION_
const POST = "POST"
const GET = "GET"
const OPTION = "OPTION"

function $Money(x) {return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");}
function $CLASS(class_name){return document.getElementsByClassName(class_name)}
function $randint(size){return Math.floor(Math.random() * size);}
function $ID(id_name){return document.getElementById(id_name)}
function $datetime(){return new Date().toLocaleString()}
function redirect(url){window.location.replace(url);}
function goto(url){window.location.href = url;}
function $(q){return document.querySelector(q)}
function $json(str){return JSON.parse(str)}
function $table(...p){console.table(...p)}
function $print(...p){console.log(...p)}
function $date(){return new Date()}
function $goto(url){goto(url);}

function $DATA(d){var data_form = new FormData();for (var key in d){data_form.append(key, d[key])};return data_form}

function $show_view(ids,classn){
	panel_views = c(classn)
	for (var i = 0; i < panel_views.length; i++) {
		if(ids!=panel_views[i].id){panel_views[i].style.display="none"}
		else{panel_views[i].style.display="block"}
	}
 }

let $http = function (p){return new http(p)}
let $send = function (p){return new http(p)}
let http =  function (p){
	CONNECTION_COUNTER += 1
	params = populate(p)
	let ACTIVE_CONNECTION = (CONNECTION_COUNTER)
	REQUESTS[ACTIVE_CONNECTION] =  params
	CONNECTION[ACTIVE_CONNECTION] = new XMLHttpRequest();
	this.xhttp = CONNECTION[ACTIVE_CONNECTION];
	this.xhttp.onreadystatechange = function(){
		if(this.readyState == 4 && this.status == 200) {
			if(REQUESTS[ACTIVE_CONNECTION].response=="all"){REQUESTS[ACTIVE_CONNECTION].func(this)}
			else if(REQUESTS[ACTIVE_CONNECTION].response=="header"){REQUESTS[ACTIVE_CONNECTION].func(this.getAllResponseHeaders())}
			else if(REQUESTS[ACTIVE_CONNECTION].response=="text"){REQUESTS[ACTIVE_CONNECTION].func(this.responseText)}
			else{REQUESTS[ACTIVE_CONNECTION].func(this.responseText)}
		}
		if(this.status == 500 && this.status == 404){
			$print(this.getAllResponseHeaders)
			REQUESTS[ACTIVE_CONNECTION].func(this.getAllResponseHeaders)
			ERROR = {"ERROR_REQUEST":CONNECTION[ACTIVE_CONNECTION]}
			$print(ERROR)
			return this.xhttp
		}
	};
	this.xhttp.open(REQUESTS[ACTIVE_CONNECTION].method,REQUESTS[ACTIVE_CONNECTION].action,REQUESTS[ACTIVE_CONNECTION].a_sync);
	for (var key in REQUESTS[ACTIVE_CONNECTION].headers){this.xhttp.setRequestHeader(key, REQUESTS[ACTIVE_CONNECTION].headers[key])}
	this.xhttp.send(params.data);
}

http.prototype.next = function(func) {this.xhttp.addEventListener('loadend', function(e){$print("* Next :"+e.type);return func});}
http.prototype.with = function(func) {this.xhttp.addEventListener('loadstart', function(e){$print("* with"+e.type);return func});}
String.prototype.replaceAt = function(index, replacement) {return this.substr(0,index)+replacement+this.substr(index+replacement.length);}

function $TRIGGER(params){
	if(params.id==undefined){params.action='#'}
	if(params.event==undefined){params.event="click"}
	if(params.func==undefined){params.func= function(){alert(params)}}
	$(params.id).addEventListener(params.event, params.func);
}

function populate(params){
	if(params.action==undefined){params.action='/'}
	if(params.data==undefined){params.data=$DATA({'_DATA':'NULL'})}
	if(params.func==undefined){params.func=function(res){$print(res)}}
	if(params.method==undefined){params.method='POST'}
	if(params.a_sync==undefined){params.a_sync=true}
	if(params.response==undefined){params.type="responseText"}
	if(params.headers==undefined){params.headers={"a_sync":params.a_sync,"req-response":params.response}}
	return params
}
